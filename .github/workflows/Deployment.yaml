name: Deployment

# PR이 main 브랜치에 발생했을 때 워크플로우를 실행
    # 메인 브랜치에 병합되기 전에 자동으로 빌드, 테스트, 배포 작업을 실행하여 코드의 품질과 안정성을 검증하기 위함
        # 즉, PR(풀 리퀘스트)을 통해 변경 사항이 main 브랜치에 합쳐지기 전에 문제가 없는지 미리 확인하고, 
        # 배포 과정까지 자동화하여 오류 발생 가능성을 줄이고 협업 효율성을 높이기 위해서
on:
  pull_request:
    branches: [ main ]

jobs:
  # Build job: Docker 이미지를 빌드하고 Docker Hub에 푸시
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - dockerfile: dockerfile
            repo: chat-recommendation
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        # 최신 코드를 가져오기
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
        # Python 버전을 출력하여 확인
      
      - name: Build and push Docker image
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          dockerfile: ${{ matrix.dockerfile }}
          image: hyunbinkim00/pairing_chat_recommendation
          tags: latest
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        # Docker 이미지를 빌드하고, Docker Hub에 'latest' 태그로 푸시

  # Deploy job: 원격 서버에 접속하여 새 이미지를 풀(Pull)하고 기존 컨테이너를 재배포
  # 1. 최신 Docker 이미지를 Docker Hub에서 가져오기.
  # 2. 기존에 실행 중인 컨테이너가 있다면 중지 (없으면 무시)
  # 3. 기존 컨테이너를 제거 
      # 기존 컨테이너를 재배포하는 과정에서 기존 컨테이너가 제거되는 순간 서비스는 잠시 재 기능을 하지 못하게 되는건가?
      # : 기존 컨테이너를 중지하고 새 컨테이너를 실행하는 과정에서는 서비스에 잠시 다운타임이 발생
      # 해결방법(추후 고도화 사안) -> 
          # - 롤링 업데이트(rolling update): 새 컨테이너를 백그라운드에서 실행한 후, 기존 컨테이너와 교체하는 방법
              #  Docker Swarm 또는 Kubernetes와 같은 오케스트레이션 도구 도입 필요
          # - 로드 밸런서를 사용해 무중단 배포하는 방법
              # 두 개의 환경(Blue: 현재 운영 중, Green: 새 버전)을 별도로 운영한 후, 새 버전이 준비되면 로드밸런서를 통해 트래픽을 Green으로 전환
  # 4. 새 컨테이너 실행
  # 5. --network 옵션을 통해 mysql-network에 연결하여, mongo-container와 mysql-container와 함께 동일 네트워크 내에서 작동하도록 설정

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: SSH Remote Commands for Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          port: 22
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
            docker stop ${{ secrets.DOCKER_REPO }} || true
            docker rm ${{ secrets.DOCKER_REPO }} || true
            docker run -d --name ${{ secrets.DOCKER_REPO }} \
                --restart always \
                --network mysql-network \
                -p 8086:8086 \
                ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
